/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/client/index.js":
/*!*****************************!*\
  !*** ./src/client/index.js ***!
  \*****************************/
/*! exports provided: data */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"data\", function() { return data; });\n/* harmony import */ var _login__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./login */ \"./src/client/login.js\");\nï»¿\r\n\r\nconst data = [\r\n    {\r\n        something: \"data\",\r\n        more: \"data\",\r\n        andMore: \"data\"\r\n    },\r\n    {\r\n        something: \"data\",\r\n        more: \"data\",\r\n        andMore: \"data\"\r\n    }\r\n];\r\n\r\nconst user = _login__WEBPACK_IMPORTED_MODULE_0__[\"activeUser\"]();\r\nconsole.log(user);\r\n\r\n// Budget Controller\r\nvar budgetController = (function () {\r\n\r\n    var Expense = function (id, description, value, catagory) {\r\n        this.id = id;\r\n        this.description = description;\r\n        this.value = value;\r\n        this.catagory = catagory;\r\n        this.percentage = -1;\r\n    };\r\n\r\n    Expense.prototype.calcPercentage = function (totalExp) {\r\n        if (totalExp > 0) {\r\n            this.percentage = Math.round((this.value / data.totals.exp) * 100);\r\n        } else {\r\n            this.percentage = -1;\r\n        }\r\n    };\r\n\r\n    Expense.prototype.getPercentage = function () {\r\n        return this.percentage;\r\n    };\r\n\r\n    var Income = function (id, description, value) {\r\n        this.id = id;\r\n        this.description = description;\r\n        this.value = value;\r\n    };\r\n\r\n    var calculateTotal = function (type) {\r\n        var sum = 0;\r\n\r\n        data.allItemes[type].forEach(function (cur) {\r\n            sum += cur.value\r\n        });\r\n        data.totals[type] = sum;\r\n    };\r\n\r\n    var addToCatagoryTotal = function (cat, value) {\r\n        data.totals[cat] += value;\r\n        data.totals['none'] = 0;\r\n    };\r\n\r\n    var deleteFromCatTotal = function (cat, value) {\r\n\r\n        data.totals[cat] -= value;\r\n\r\n        if (data.allItemes['exp'].length === 0) {\r\n            data.totals['none'] = 100;\r\n        }\r\n    };\r\n\r\n    var getCatSums = function () {\r\n        var totals = data.totals;\r\n\r\n        return {\r\n            none: totals.none,\r\n            misc: totals.misc,\r\n            home: totals.home,\r\n            transport: totals.transport,\r\n            groceries: totals.groceries,\r\n            insurance: totals.insurance,\r\n            dining: totals.dining,\r\n            entertainment: totals.entertainment,\r\n        }\r\n    };\r\n\r\n    var orderCatSumsList = function () {\r\n        var sorted = [];\r\n        var catagoryObj = getCatSums();\r\n\r\n        for (var cur in catagoryObj) {\r\n            if (cur !== 'none') {\r\n                sorted.push([cur, catagoryObj[cur]])\r\n            }\r\n        }\r\n\r\n        sorted.sort(function (a, b) {\r\n            return b[1] - a[1];\r\n        });\r\n\r\n        return sorted;\r\n    };\r\n\r\n    var data = {\r\n        allItemes: {\r\n            exp: [],\r\n            inc: []\r\n        },\r\n\r\n        totals: {\r\n            exp: 0,\r\n            inc: 0,\r\n            none: 100,\r\n            misc: 0,\r\n            home: 0,\r\n            transport: 0,\r\n            groceries: 0,\r\n            insurance: 0,\r\n            dining: 0,\r\n            entertainment: 0,\r\n        },\r\n        budget: 0,\r\n        percentSpent: -1\r\n    }\r\n\r\n    return {\r\n        addItem: function (type, des, val, cat) {\r\n            var newItem, ID;\r\n\r\n            // Creat new ID\r\n            if (data.allItemes[type].length > 0) {\r\n                ID = data.allItemes[type][data.allItemes[type].length - 1].id + 1;\r\n            } else ID = 0\r\n\r\n\r\n            // Create new item based on 'inc' or 'exp' type\r\n            if (type === 'exp') {\r\n                newItem = new Expense(ID, des, val, cat);\r\n                addToCatagoryTotal(cat, val);\r\n            } else if (type === 'inc') {\r\n                newItem = new Income(ID, des, val);\r\n            }\r\n\r\n            // Push it into our data structure\r\n            data.allItemes[type].push(newItem);\r\n\r\n            // Return the new element\r\n            return newItem;\r\n        },\r\n\r\n        deleteItem: function (type, id, cat, val) {\r\n            var ids, index;\r\n\r\n            //id = 3\r\n            //data.allItemes[type]['id'];\r\n\r\n            var ids = data.allItemes[type].map(function (current) {\r\n                return current.id\r\n\r\n            });\r\n\r\n            index = ids.indexOf(id);\r\n\r\n            if (index !== -1) {\r\n                data.allItemes[type].splice(index, 1);\r\n            }\r\n\r\n            // Delete from the catagory sum\r\n            if (type === 'exp') {\r\n                deleteFromCatTotal(cat, val);\r\n            }\r\n\r\n        },\r\n\r\n        calculateBudget: function () {\r\n\r\n            // calculate total income and expenses\r\n            calculateTotal('exp');\r\n            calculateTotal('inc');\r\n\r\n            // Calculate the budget: income - expenses\r\n            data.budget = data.totals.inc - data.totals.exp;\r\n\r\n            //Calculate the percentage of income that we spent\r\n            if (data.totals.inc > 0) {\r\n                data.percentSpent = Math.round((data.totals.exp / data.totals.inc) * 100);\r\n            } else {\r\n                data.percetnSpent = -1;\r\n            }\r\n        },\r\n\r\n\r\n\r\n        calculatePercentages: function () {\r\n\r\n            data.allItemes.exp.forEach(function (cur) {\r\n                cur.calcPercentage(data.totals.exp);\r\n            });\r\n\r\n\r\n            /*\r\n            for (var i = 0; i <= data.allItemes['exp'].length; i++) {\r\n                if (data.allItemes['exp'][i]) {\r\n                    data.expPercent[i] = Math.round(100 * (data.allItemes['exp'][i].value / data.totals.exp));\r\n                } else {\r\n                    data.expPercent.splice(i, 1);\r\n                }\r\n            }\r\n            */\r\n        },\r\n\r\n        getPercentages: function () {\r\n            var allPerc = data.allItemes.exp.map(function (cur) {\r\n                return cur.getPercentage();\r\n            });\r\n            return allPerc;\r\n        },\r\n\r\n        getCatPercentages: function () {\r\n            var totals = data.totals;\r\n\r\n            return {\r\n                none: totals.none,\r\n                misc: Math.round((totals.misc / totals.exp) * 100),\r\n                home: Math.round((totals.home / totals.exp) * 100),\r\n                transport: Math.round((totals.transport / totals.exp) * 100),\r\n                groceries: Math.round((totals.groceries / totals.exp) * 100),\r\n                insurance: Math.round((totals.insurance / totals.exp) * 100),\r\n                dining: Math.round((totals.dining / totals.exp) * 100),\r\n                entertainment: Math.round((totals.entertainment / totals.exp) * 100),\r\n            }\r\n        },\r\n\r\n        getOrderedCatSums: function () {\r\n            var sums = orderCatSumsList();\r\n            return sums;\r\n        },\r\n\r\n        getBudget: function () {\r\n            return {\r\n                budget: data.budget,\r\n                totalInc: data.totals.inc,\r\n                totalExp: data.totals.exp,\r\n                percentSpent: data.percentSpent\r\n            }\r\n        },\r\n\r\n        testing: function () {\r\n            return data;\r\n        }\r\n    };\r\n\r\n})();\r\n\r\n// UI Controller\r\nvar UIController = (function () {\r\n\r\n    var DOMstrings = {\r\n        inputType: '.add__type',\r\n        inputDescription: '.add__description',\r\n        inputValue: '.add__value',\r\n        inputBtn: '.add__btn',\r\n        inputCatagory: '.add__catagory',\r\n        incomeContainer: '.income__list',\r\n        expenseContainer: '.expenses__list',\r\n        outputBudget: '.budget__value',\r\n        outputInc: '.budget__income--value',\r\n        outputExp: '.budget__expenses--value',\r\n        outputPercent: '.budget__expenses--percentage',\r\n        container: '.container',\r\n        expensesPercLabel: '.item__percentage',\r\n        dateLabel: '.budget__title--month',\r\n        piechart: '.piechart',\r\n        forwardBtn: '.chart__btn__forward',\r\n        backBtn: '.chart__btn__back',\r\n        doughnutChart: '.doughnut__chart',\r\n        chartContainer: '.chart-container',\r\n        overviewContainer: '.overview__container',\r\n        detailsContainer: '.details__container',\r\n        row: '.row',\r\n        header: '.header',\r\n        details: '.details'\r\n\r\n    }\r\n\r\n    var formatNumber = function (num, type) {\r\n        var numSplit, int, dec, sign;\r\n\r\n        /*\r\n        + or - before number \r\n        exactly 2 decimal points\r\n        comma separating the thousand\r\n        */\r\n\r\n        num = Math.abs(num);\r\n        num = num.toFixed(2);\r\n\r\n        numSplit = num.split('.');\r\n\r\n        int = numSplit[0];\r\n        if (int.length > 3) {\r\n            int = int.substr(0, int.length - 3) + ',' + int.substr(int.length - 3, 3); //input 2310, output 2,310\r\n        }\r\n\r\n        dec = numSplit[1];\r\n\r\n        return (type === 'exp' ? sign = '-' : sign = '+') + ' ' + int + '.' + dec;\r\n\r\n    }\r\n\r\n    var nodeListForEach = function (list, callback) {\r\n        for (var i = 0; i < list.length; i++) {\r\n            callback(list[i], i)\r\n        }\r\n    }\r\n\r\n    var catagoriesHTML = {\r\n\r\n        misc: '<div class=\"row misc-div\"><div class=\"icon-div\"><i class=\"fa        fa-question-circle\"></i></div><div class=\"content-div\"><div class=\"title\">Misc & Checks</div><div class=\"description\">You spent a total of <b class=\"misc-exp\">%amt%</b> on Misc & Checks</div></div></div>',\r\n\r\n\r\n        home: '<div class=\"row home-div\"><div class=\"icon-div\"><i class=\"fa fa-wrench\"></i></div><div class=\"content-div\"><div class=\"title\">Home & Utilities</div><div class=\"description\">You spent a total of <b class=\"home-exp\">%amt%</b> on Home goods</div></div></div>',\r\n\r\n        transport: '<div class=\"row transport-div\"><div class=\"icon-div\"><i class=\"fa fa-car\"></i></div><div class=\"content-div\"><div class=\"title\">Transportation</div><div class=\"description\">You spent a total of <b class=\"transport-exp\">%amt%</b> on Transportation</div></div></div>',\r\n\r\n        groceries: '<div class=\"row groceries-div\"><div class=\"icon-div\"><i class=\"fa fa-shopping-basket\"></i></div><div class=\"content-div\"><div class=\"title\">Groceries</div><div class=\"description\">You spent a total of <b class=\"groceries-exp\">%amt%</b> on Groceries</div></div></div>',\r\n\r\n        insurance: '<div class=\"row insurance-div\"><div class=\"icon-div\"><i class=\"fa fa-piggy-bank\"></i></div><div class=\"content-div\"><div class=\"title\">Insurance</div><div class=\"description\">You spent a total of <b class=\"insurance-exp\">%amt%</b> on Insurance</div></div></div>',\r\n\r\n        dining: '<div class=\"row dining-div\"><div class=\"icon-div\"><i class=\"fa fa-utensils\"></i></div><div class=\"content-div\"><div class=\"title\">Restaurants and Dining</div><div class=\"description\">You spent a total of <b class=\"dining-exp\">%amt%</b> on Restaurants and Dining</div></div></div>',\r\n\r\n        entertainment: '<div class=\"row entertainment-div\"><div class=\"icon-div\"><i class=\"fa fa-theater-masks\"></i></div><div class=\"content-div\"><div class=\"title\">Entertainment</div><div class=\"description\">You spent a total of <b class=\"entertainment-exp\">%amt%</b> on Entertainment</div></div></div>'\r\n    }\r\n\r\n    return {\r\n        getInput: function () {\r\n            return {\r\n                type: document.querySelector(DOMstrings.inputType).value, // Will be either income or expense\r\n                catagory: document.querySelector(DOMstrings.inputCatagory).value,\r\n                description: document.querySelector(DOMstrings.inputDescription).value,\r\n                value: parseFloat(document.querySelector(DOMstrings.inputValue).value)\r\n            };\r\n        },\r\n\r\n        addListItem: function (obj, type) {\r\n            var html, newHtml, element;\r\n\r\n            // Create HTML string with placeholder text\r\n            if (type === 'inc') {\r\n                element = DOMstrings.incomeContainer;\r\n                html = '<div class=\"item clearfix\" id=\"inc-%id%\"><div class=\"item__description\">%description%</div><div class=\"right clearfix\"><div class=\"item__value\">%value%</div><div class=\"item__delete\"><button class=\"item__delete--btn\"><i class=\"ion-ios-close-outline\"></i></button></div></div></div>'\r\n            } else if (type === 'exp') {\r\n                element = DOMstrings.expenseContainer\r\n                html = '<div class=\"item clearfix\" id=\"exp-%id%\"><div class=\"item__description\">%description%</div><div class=\"right clearfix\"><div class=\"item__value\"> %value%</div><div class=\"item__percentage\">21%</div><div class=\"item__delete\"><button class=\"item__delete--btn\"><i class=\"ion-ios-close-outline\"></i></button></div></div></div>'\r\n            }\r\n            // Replace the placeholder text with some actual data \r\n            newHtml = html.replace('%id%', obj.id);\r\n            newHtml = newHtml.replace('%description%', obj.description);\r\n            newHtml = newHtml.replace('%value%', formatNumber(obj.value, type));\r\n\r\n            // Insert the html into the DOM\r\n            document.querySelector(element).insertAdjacentHTML('beforeend', newHtml);\r\n\r\n        },\r\n\r\n        addCatagory: function (id, cat) {\r\n            var input = document.getElementById('exp-' + id);\r\n            return input.classList.add(cat)\r\n        },\r\n\r\n        toggleCatagoryFields: function () {\r\n            document.querySelector(DOMstrings.inputCatagory).classList.toggle('hide');\r\n        },\r\n\r\n        deleteListItem: function (selectorID) {\r\n            var el = document.getElementById(selectorID)\r\n            el.parentNode.removeChild(el)\r\n        },\r\n\r\n        clearFields: function () {\r\n            var fields, fieldsArr;\r\n\r\n            fields = document.querySelectorAll(DOMstrings.inputDescription + ', ' + DOMstrings.inputValue);\r\n\r\n            fieldsArr = Array.prototype.slice.call(fields);\r\n\r\n            fieldsArr.forEach(function (current, index, array) {\r\n                current.value = \"\";\r\n            });\r\n\r\n            fieldsArr[0].focus();\r\n\r\n        },\r\n\r\n        displayBudget: function (obj) {\r\n            var type;\r\n            obj.budget > 0 ? type = 'inc' : type = 'exp';\r\n\r\n            document.querySelector(DOMstrings.outputBudget).textContent = formatNumber(obj.budget, type);\r\n            document.querySelector(DOMstrings.outputInc).textContent = formatNumber(obj.totalInc, 'inc');\r\n            document.querySelector(DOMstrings.outputExp).textContent = formatNumber(obj.totalExp, 'exp');\r\n\r\n            if (obj.percentSpent > 0) {\r\n                document.querySelector(DOMstrings.outputPercent).textContent = obj.percentSpent + '%';\r\n            } else {\r\n                document.querySelector(DOMstrings.outputPercent).textContent = '---';\r\n            }\r\n        },\r\n\r\n        displayPercentages: function (percentages) {\r\n\r\n            var fields = document.querySelectorAll(DOMstrings.expensesPercLabel);\r\n\r\n            nodeListForEach(fields, function (current, index) {\r\n                if (percentages[index] > 0) {\r\n                    current.textContent = percentages[index] + '%';\r\n                } else {\r\n                    current.textContent = '---';\r\n                }\r\n\r\n            });\r\n\r\n        },\r\n\r\n        displayMonth: function () {\r\n            var now, year, months, month, day;\r\n            now = new Date();\r\n            //var Christmas = new Date(2016, 11, 25);\r\n\r\n            months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n            month = now.getMonth();\r\n            day = now.getDay();\r\n\r\n            year = now.getFullYear();\r\n\r\n            document.querySelector(DOMstrings.dateLabel).textContent = months[month] + ' ' + year;\r\n        },\r\n\r\n        displayCatagoriesList: function (sums) {\r\n            var count, plusBTN, plusHTML;\r\n\r\n            // Remove current html and normal size\r\n            document.querySelector(DOMstrings.overviewContainer).innerHTML = '';\r\n            document.querySelector(DOMstrings.overviewContainer).style.height = '600px';\r\n\r\n            // Add new/reordered html\r\n            count = 0;\r\n            sums.forEach(function (cur) {\r\n                var current = cur[0];\r\n\r\n                if (cur[1] > 0) {\r\n                    document.querySelector(DOMstrings.overviewContainer).insertAdjacentHTML('beforeend', catagoriesHTML[current]);\r\n                    document.querySelector('.' + current + '-exp').innerHTML = cur[1];\r\n\r\n                    if (count > 3) {\r\n                        document.querySelector(DOMstrings.overviewContainer).lastChild.style.display = 'none';\r\n                    }\r\n                    count += 1;\r\n                }\r\n            });\r\n\r\n            // Make plus button appear when list exceeds 4 and leave when it is less\r\n            plusHTML = '<div class=\"plus-icon\"><i class=\"fa fa-plus\"></i></div>';\r\n            plusBTN = document.querySelector('.plus-icon');\r\n\r\n            if (plusBTN === null && count > 4) {\r\n                document.querySelector(DOMstrings.overviewContainer).insertAdjacentHTML('beforeend', plusHTML);\r\n            } else if (plusBTN && count <= 4) {\r\n                document.querySelector('.descriptions__container').removeChild(plusBTN);\r\n            }\r\n\r\n        },\r\n\r\n        showOverflowItems: function () {\r\n            var containerList, loops, plusBTN, minusHTML;\r\n\r\n            // Remove plus button\r\n            plusBTN = document.querySelector('.plus-icon');\r\n            plusBTN.parentNode.removeChild(plusBTN);\r\n\r\n            // Insert minus button\r\n            minusHTML = '<div class=\"minus-icon\"><i class=\"fa fa-minus\"></i></div>';\r\n            document.querySelector(DOMstrings.overviewContainer).insertAdjacentHTML('beforeend', minusHTML);\r\n\r\n            // Show overflow items\r\n            containerList = document.querySelector(DOMstrings.overviewContainer).children;\r\n            loops = containerList.length - 4;\r\n\r\n            document.querySelector(DOMstrings.overviewContainer).style.height = (593 + (143 * loops)) + 'px';\r\n\r\n            if (loops > 0) {\r\n                for (loops; loops > 0; loops--) {\r\n                    containerList[containerList.length - loops].style.display = \"grid\";\r\n                    containerList[containerList.length - loops].classList.add('show');\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        hideOverflowItems: function () {\r\n            var containerList, loops, plusBTN;\r\n\r\n            // Remove minus button\r\n            minusBTN = document.querySelector('.minus-icon');\r\n            minusBTN.parentNode.removeChild(minusBTN);\r\n\r\n            // Insert plus button\r\n            plusHTML = '<div class=\"plus-icon\"><i class=\"fa fa-plus\"></i></div>';\r\n            document.querySelector(DOMstrings.overviewContainer).insertAdjacentHTML('beforeend', plusHTML);\r\n\r\n            // Hide overflow items\r\n            containerList = document.querySelector(DOMstrings.overviewContainer).children;\r\n            loops = containerList.length - 5;\r\n\r\n            document.querySelector(DOMstrings.overviewContainer).style.height = '593px';\r\n\r\n            if (loops > 0) {\r\n                for (loops; loops > 0; loops--) {\r\n                    containerList[(containerList.length - 1) - loops].style.display = \"none\";\r\n                    containerList[(containerList.length - 1) - loops].classList.remove('show');\r\n                }\r\n            }\r\n        },\r\n\r\n        changedType: function () {\r\n\r\n            var fields = document.querySelectorAll(\r\n                DOMstrings.inputType + ',' +\r\n                DOMstrings.inputDescription + ',' +\r\n                DOMstrings.inputValue + ',' +\r\n                DOMstrings.inputCatagory);\r\n\r\n            nodeListForEach(fields, function (cur) {\r\n                cur.classList.toggle('red-focus');\r\n            });\r\n\r\n            document.querySelector(DOMstrings.inputBtn).classList.toggle('red');\r\n\r\n        },\r\n\r\n        slideToNextSection: function () {\r\n            var section1Cls, section2Cls, buttonFwd, buttonBack\r\n\r\n            section1Cls = document.querySelector(DOMstrings.container).classList;\r\n            section2Cls = document.querySelector(DOMstrings.piechart).classList;\r\n\r\n            buttonFwd = document.querySelector(DOMstrings.forwardBtn).classList;\r\n            buttonBack = document.querySelector(DOMstrings.backBtn).classList;\r\n\r\n            if (section1Cls.length < 3) {\r\n                section1Cls.add('move-left-0');\r\n                buttonFwd.add('fade-out');\r\n            } else {\r\n                section1Cls.toggle('move-right-0');\r\n                section1Cls.toggle('move-left-0');\r\n\r\n                buttonFwd.toggle('fade-in');\r\n                buttonFwd.toggle('fade-out');\r\n            }\r\n\r\n            if (section2Cls.length < 2) {\r\n                section2Cls.add('move-left-1');\r\n                buttonBack.add('fade-in');\r\n            } else {\r\n                section2Cls.toggle('move-right-1');\r\n                section2Cls.toggle('move-left-1');\r\n\r\n                buttonBack.toggle('fade-out');\r\n                buttonBack.toggle('fade-in');\r\n            }\r\n\r\n        },\r\n\r\n        slideToNextDiv: function () {\r\n            var detailsCls, overviewCls;\r\n\r\n            overviewCls = document.querySelector(DOMstrings.overviewContainer).classList;\r\n            detailsCls = document.querySelector(DOMstrings.detailsContainer).classList;\r\n\r\n            if (overviewCls.length < 2) {\r\n                overviewCls.add('move-left-display-none');\r\n            } else {\r\n                overviewCls.toggle('move-right-delay');\r\n                overviewCls.toggle('move-left-display-none');\r\n            }\r\n\r\n            if (detailsCls < 2) {\r\n                detailsCls.add('move-left-1');\r\n            } else {\r\n                detailsCls.toggle('move-right-1');\r\n                detailsCls.toggle('move-left-1');\r\n            }\r\n\r\n        },\r\n\r\n        getChartDate: function () {\r\n            var now, months;\r\n\r\n            now = new Date();\r\n            months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\r\n\r\n            return {\r\n                month: months[now.getMonth()],\r\n                year: now.getFullYear()\r\n            }\r\n        },\r\n\r\n        makeDoughnutChart: function (per, exp) {\r\n            var chart, catagories, titleDates, title;\r\n\r\n            titleDates = UIController.getChartDate();\r\n            title = \"Expenses: \" + titleDates.month + ' ' + titleDates.year;\r\n            catagories = ['No Expences', 'Misc & Checks', 'Home & Utilities', 'Transportation', 'Groceries', 'Insurance', 'Restaurants & Dining', 'Entertainment'];\r\n            chart = document.querySelector(DOMstrings.doughnutChart).getContext('2d');\r\n\r\n            Chart.defaults.global.defaultFontFamily = 'Lato';\r\n            Chart.defaults.global.defaultFontSize = 18;\r\n            Chart.defaults.global.defaultFontColor = '#777';\r\n            Chart.pluginService.register({\r\n                beforeDraw: function (chart) {\r\n                    if (chart.config.options.elements.center) {\r\n                        //Get ctx from string\r\n                        var ctx = chart.chart.ctx;\r\n\r\n                        //Get options from the center object in options\r\n                        var centerConfig = chart.config.options.elements.center;\r\n                        var fontStyle = centerConfig.fontStyle || 'Arial';\r\n                        var txt = centerConfig.text;\r\n                        var color = centerConfig.color || '#000';\r\n                        var sidePadding = centerConfig.sidePadding || 20;\r\n                        var sidePaddingCalculated = (sidePadding / 100) * (chart.innerRadius * 2)\r\n                        //Start with a base font of 30px\r\n                        ctx.font = \"30px \" + fontStyle;\r\n\r\n                        //Get the width of the string and also the width of the element minus 10 to give it 5px side padding\r\n                        var stringWidth = ctx.measureText(txt).width;\r\n                        var elementWidth = (chart.innerRadius * 2) - sidePaddingCalculated;\r\n\r\n                        // Find out how much the font can grow in width.\r\n                        var widthRatio = elementWidth / stringWidth;\r\n                        var newFontSize = Math.floor(30 * widthRatio);\r\n                        var elementHeight = (chart.innerRadius * 2);\r\n\r\n                        // Pick a new font size so it will not be larger than the height of label.\r\n                        var fontSizeToUse = Math.min(newFontSize, elementHeight);\r\n\r\n                        // Set font settings to draw it correctly.\r\n                        ctx.textAlign = 'center';\r\n                        ctx.textBaseline = 'middle';\r\n                        var centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);\r\n                        var centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 2);\r\n                        ctx.font = fontSizeToUse + \"px \" + fontStyle;\r\n                        ctx.fillStyle = color;\r\n\r\n                        //Draw text in center\r\n                        ctx.fillText(txt, centerX, centerY);\r\n                    }\r\n                }\r\n            });\r\n\r\n            return {\r\n\r\n                doughnutChart: new Chart(chart, {\r\n                    type: 'doughnut',\r\n                    innerRadius: '15%',\r\n                    radius: '90%',\r\n\r\n                    data: {\r\n                        labels: catagories,\r\n                        datasets: [{\r\n                            data: per,\r\n                            backgroundColor: [\r\n                                'rgba(235, 235, 235, 1)',\r\n                                'rgba(200, 200, 200, 0.6)',\r\n                                'rgba(255, 99, 132, 0.6)',\r\n                                'rgba(54, 162, 235, 0.6)',\r\n                                'rgba(255, 206, 86, 0.6)',\r\n                                'rgba(75, 192, 192, 0.6)',\r\n                                'rgba(153, 102, 255, 0.6)',\r\n                                'rgba(255, 159, 64, 0.6)'],\r\n                            borderColor: [\r\n                                'rgba(200, 200, 200, 1)',\r\n                                'rgba(200, 200, 200, 1)',\r\n                                'rgba(255,99,132,1)',\r\n                                'rgba(54, 162, 235, 1)',\r\n                                'rgba(255, 206, 86, 1)',\r\n                                'rgba(75, 192, 192, 1)',\r\n                                'rgba(153, 102, 255, 1)',\r\n                                'rgba(255, 159, 64, 1)'\r\n                            ],\r\n                            borderWidth: [2, 0, 0, 0, 0, 0, 0, 0],\r\n                            hoverBorderWidth: 1,\r\n                        }],\r\n                    },\r\n                    options: {\r\n                        responsive: false,\r\n                        legend: {\r\n                            display: false,\r\n                        },\r\n                        title: {\r\n                            display: true,\r\n                            text: title,\r\n                            fontSize: 30\r\n                        },\r\n                        cutoutPercentage: 75,\r\n                        elements: {\r\n                            center: {\r\n                                text: '$' + exp,\r\n                                color: '#444', // Default is #000000\r\n                                fontStyle: 'Arial', // Default is Arial\r\n                                sidePadding: 20, // Defualt is 20 (as a percentage)\r\n                                backgroundColor: 'red',\r\n                                display: 'block'\r\n                            }\r\n                        },\r\n                        tooltips: {\r\n                            callbacks: {\r\n                                label: function (tooltipItem, chartData) {\r\n                                    return chartData.labels[tooltipItem.index] + ': ' + chartData.datasets[0].data[tooltipItem.index] + '%';\r\n                                }\r\n                            }\r\n                        },\r\n                        animation: {\r\n                            duration: 2000,\r\n                            easing: 'easeInOutQuart'\r\n                        }\r\n                    }\r\n\r\n                }),\r\n            }\r\n\r\n        },\r\n\r\n        getChartCanvas: function () {\r\n            var container, canvas;\r\n\r\n            canvas = '<canvas class=\"doughnut__chart\" width=\"1200\" height=\"600\"></canvas>';\r\n            container = document.querySelector(DOMstrings.chartContainer);\r\n\r\n            container.insertAdjacentHTML('beforeend', canvas);\r\n        },\r\n\r\n        deleteChartCanvas: function () {\r\n            var container, canvas;\r\n\r\n            container = document.querySelector(DOMstrings.chartContainer);\r\n            canvas = document.querySelector(DOMstrings.doughnutChart);\r\n\r\n            container.removeChild(canvas);\r\n        },\r\n\r\n        displayCatListItems: function (cat) {\r\n            var newItems, details, listLength;\r\n\r\n            newItems = document.getElementsByClassName(cat);\r\n            details = document.querySelector(DOMstrings.details);\r\n\r\n            details.innerHTML = ''\r\n            listLength = newItems.length;\r\n\r\n            for (var i = 0; i < listLength; i++) {\r\n                document.querySelector(DOMstrings.details).insertAdjacentHTML('beforeend', newItems[i].outerHTML);\r\n            }\r\n        },\r\n\r\n        displayDetailDiv: function (cat) {\r\n            var header, newHtml, detail;\r\n\r\n            newHtml = catagoriesHTML[cat];\r\n\r\n            header = document.querySelector(DOMstrings.header);\r\n            detail = document.querySelector(DOMstrings.details);\r\n\r\n            header.insertAdjacentHTML('afterbegin', newHtml);\r\n            header.firstChild.insertAdjacentHTML('beforeend', '<div class=\"percent\">100%</div>');\r\n        },\r\n\r\n        clearDetailContainer: function () {\r\n            document.querySelector(DOMstrings.header).innerHTML = '';\r\n            document.querySelector(DOMstrings.details).innerHTML = '';\r\n        },\r\n\r\n        displayCatPercentages: function (cat, per) {\r\n            cat = cat.split('-');\r\n            document.querySelector('.percent').textContent = per[cat[0]] + '%';\r\n        },\r\n\r\n        displayDetailsSum: function (sum, cat) {\r\n            var sumContainer = document.getElementsByClassName(cat + '-exp');\r\n\r\n            sumContainer[1].innerHTML = '$' + sum;\r\n        },\r\n\r\n        getDOMstrings: function () {\r\n            return DOMstrings;\r\n        }\r\n    };\r\n\r\n})();\r\n\r\n// Global App Controller\r\nvar Controller = (function (budgetCtrl, UICtrl) {\r\n\r\n    var setupEventListenters = function () {\r\n        var DOM = UICtrl.getDOMstrings();\r\n\r\n        // Call addItems\r\n        document.querySelector(DOM.inputBtn).addEventListener('click', ctrlAddItem);\r\n\r\n        document.addEventListener('keypress', function (event) {\r\n\r\n            if (event.keyCode === 13 || event.which === 13) {\r\n                ctrlAddItem();\r\n            }\r\n\r\n        });\r\n\r\n        // Call deleteItems\r\n        document.querySelector(DOM.container).addEventListener('click', ctrlDeleteItem);\r\n        document.querySelector(DOM.details).addEventListener('click', ctrlDeleteItem);\r\n\r\n\r\n        // Alternate between 'inc' and 'exp'\r\n        document.querySelector(DOM.inputType).addEventListener('change', UICtrl.changedType);\r\n\r\n        // Alternate between sections\r\n        document.querySelector(DOM.forwardBtn).addEventListener('click', UICtrl.slideToNextSection);\r\n        document.querySelector(DOM.backBtn).addEventListener('click', UICtrl.slideToNextSection);\r\n\r\n        document.addEventListener('keydown', function (event) {\r\n\r\n            if (event.keyCode === 39 || event.which === 39 ||\r\n                event.keyCode === 37 || event.which === 37) {\r\n\r\n                UICtrl.slideToNextSection();\r\n                ctrlRenderChart();\r\n            }\r\n        });\r\n\r\n        // Doughnut chart\r\n        document.querySelector(DOM.forwardBtn).addEventListener('click', function () {\r\n            ctrlRenderChart();\r\n        });\r\n\r\n        // Add catagory fields selection\r\n        document.querySelector(DOM.inputType).addEventListener('change', UICtrl.toggleCatagoryFields);\r\n\r\n        // Show overflow catagories on click\r\n        document.querySelector(DOM.piechart).addEventListener('click', function (event) {\r\n            var plusBTN, minusBTN;\r\n\r\n            plusBTN = document.querySelector('.plus-icon');\r\n            minusBTN = document.querySelector('.minus-icon');\r\n\r\n            if (event.path[1] === plusBTN) {\r\n                UICtrl.showOverflowItems();\r\n            } else if (event.path[1] === minusBTN) {\r\n                UICtrl.hideOverflowItems();\r\n            }\r\n        });\r\n\r\n        // Slide to next div\r\n        document.querySelector(DOM.overviewContainer).addEventListener('click', function (event) {\r\n            var node, catagory;\r\n\r\n            node = getNode(event);\r\n            if (node) {\r\n                catagory = node.classList[1];\r\n                ctrlUpdateDetails(catagory);\r\n                UICtrl.slideToNextDiv();\r\n            }\r\n\r\n        });\r\n        document.querySelector('.fa-caret-left').addEventListener('click', function () {\r\n            ctrlDisplayCatagoryList();\r\n            UICtrl.slideToNextDiv();\r\n            UICtrl.clearDetailContainer();\r\n        });\r\n\r\n    }\r\n\r\n    var updateBudget = function () {\r\n        // 1. Calculate the budget\r\n        budgetCtrl.calculateBudget();\r\n\r\n        // 2. Return the budget\r\n        var budget = budgetCtrl.getBudget();\r\n\r\n        // 3. Dispaly the budget\r\n        UICtrl.displayBudget(budget);\r\n\r\n    };\r\n\r\n    var updateDetails = function () {\r\n        var catagory, header;\r\n        header = document.querySelector('.header');\r\n\r\n        if (header.childElementCount > 0) {\r\n            catagory = header.firstChild.classList[1];\r\n            ctrlUpdateDetails(catagory);\r\n        }\r\n    }\r\n\r\n    var updatePercentages = function () {\r\n        // 1. calculate percentages\r\n        budgetCtrl.calculatePercentages();\r\n\r\n        // 2. Read percentages from the budget controller\r\n        var percentages = budgetCtrl.getPercentages();\r\n\r\n        // 3. update UI with the new percentages\r\n        UICtrl.displayPercentages(percentages);\r\n    }\r\n\r\n    var checkValueStatus = function () {\r\n        var percentages, catagory, header;\r\n\r\n        header = document.querySelector('.header');\r\n        percentages = budgetCtrl.getCatPercentages();\r\n\r\n        if (header.childElementCount > 0) {\r\n            catagory = header.firstChild.classList[1];\r\n            catagory = catagory.split('-');\r\n\r\n            if (percentages[catagory[0]] === 0 ||\r\n                isNaN(percentages[catagory[0]]) ||\r\n                percentages[catagory[0]] === undefined ||\r\n                percentages[catagory[0]] === Infinity) {\r\n\r\n                UICtrl.slideToNextDiv();\r\n                UICtrl.clearDetailContainer();\r\n            }\r\n        }\r\n    }\r\n\r\n    var getNode = function (e) {\r\n        var node;\r\n\r\n        if (event.path[2].classList[0] === 'row') {\r\n            node = event.path[2];\r\n        } else if (event.path[1].classList[0] === 'row') {\r\n            node = event.path[1];\r\n        } else if (event.path[0].classList[0] === 'row') {\r\n            node = event.path[0];\r\n        } else {\r\n            node = null;\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    var ctrlAddItem = function () {\r\n        var input, newItem;\r\n\r\n        // 1. Get the feild input data \r\n        input = UICtrl.getInput();\r\n\r\n        if (input.description !== \"\" && !isNaN(input.value) && input.value > 0) {\r\n\r\n            // 2. Add item to budget contoller\r\n            newItem = budgetCtrl.addItem(input.type, input.description, input.value, input.catagory);\r\n\r\n            // 3. Add the new item to the UI\r\n            UICtrl.addListItem(newItem, input.type);\r\n            if (input.type === 'exp') {\r\n                UICtrl.addCatagory(newItem.id, newItem.catagory);\r\n            }\r\n\r\n            // 4. Clear the fields\r\n            UICtrl.clearFields();\r\n\r\n            // 5. Calculate and update budget\r\n            updateBudget();\r\n\r\n            // 6. Calculate and update percentages\r\n            updatePercentages();\r\n\r\n            // 7. Render chart\r\n            if (input.type === 'exp') {\r\n                ctrlRenderChart();\r\n            }\r\n            // 8. Update details page if active\r\n            updateDetails();\r\n        }\r\n    };\r\n\r\n    var ctrlDeleteItem = function (event) {\r\n        var itemID, splitID, type, ID, cat, eventClassList, val, valElm, valArr;\r\n\r\n        itemID = event.target.parentNode.parentNode.parentNode.parentNode.id;\r\n        eventClassList = event.target.parentNode.parentNode.parentNode.parentNode.classList;\r\n        cat = eventClassList[2];\r\n\r\n        // Get deleted value\r\n        valElm = event.target.parentNode.parentNode.parentNode.firstChild.innerHTML;\r\n        if (valElm) {\r\n            valArr = valElm.split(' ');\r\n            val = parseInt(valArr[2]);\r\n        }\r\n\r\n        if (itemID) {\r\n\r\n            //inc-1 to ['inc', 1]\r\n            splitID = itemID.split('-');\r\n            type = splitID[0];\r\n            ID = parseInt(splitID[1]);\r\n\r\n            // 1. Delete item from the data structure\r\n            budgetCtrl.deleteItem(type, ID, cat, val);\r\n\r\n            // 2. Delete item from UI\r\n            UICtrl.deleteListItem(itemID);\r\n\r\n            // 3. Update and show the new budget\r\n            updateBudget();\r\n\r\n            // 4. Calculate and update percentages\r\n            updatePercentages();\r\n\r\n            // 5. Update chart\r\n            ctrlRenderChart();\r\n\r\n            // 6. Update details page if active\r\n            updateDetails();\r\n\r\n            checkValueStatus();\r\n\r\n        }\r\n    };\r\n\r\n    var ctrlRenderChart = function () {\r\n        var percentages, budget, percentagesObj, expences;\r\n\r\n        // 1. Delet current chart\r\n        UICtrl.deleteChartCanvas();\r\n\r\n        // 2. Get/update chart data\r\n        percentagesObj = budgetCtrl.getCatPercentages();\r\n        budget = budgetCtrl.getBudget();\r\n\r\n        percentages = Object.values(percentagesObj);\r\n        expences = budget.totalExp.toFixed(2);\r\n\r\n        // 3. Add chart canvas back to DOM\r\n        UICtrl.getChartCanvas();\r\n\r\n        // 4. Make chart\r\n        UICtrl.makeDoughnutChart(percentages, expences);\r\n\r\n        // 5. Display description list\r\n        ctrlDisplayCatagoryList();\r\n\r\n        // 6. Update details \r\n        updateCatAmounts()\r\n    }\r\n\r\n    var ctrlUpdateDetails = function (cat) {\r\n        cat = (cat.split('-'))[0];\r\n\r\n        // 1. Remove current content\r\n        UICtrl.clearDetailContainer()\r\n\r\n        // 2. Insert html\r\n        UICtrl.displayDetailDiv(cat);\r\n\r\n        // 3. Render percentage\r\n        updateCatAmounts();\r\n\r\n        // 4. Add list items\r\n        UICtrl.displayCatListItems(cat);\r\n\r\n    }\r\n\r\n    var updateCatAmounts = function () {\r\n        var cat, percentages, sums, sum, header;\r\n\r\n        percentages = budgetCtrl.getCatPercentages();\r\n        header = document.querySelector('.header');\r\n        sums = budgetCtrl.getOrderedCatSums();\r\n\r\n        if (header.childElementCount > 0) {\r\n            cat = header.firstChild.classList[1]\r\n            cat = cat.split('-');\r\n\r\n            // Update percentages\r\n            UICtrl.displayCatPercentages(cat[0], percentages);\r\n\r\n            // Get/Update sums\r\n            sums.forEach(function (cur) {\r\n                if (cur[0] === cat[0]) {\r\n                    sum = cur[1]\r\n                }\r\n            });\r\n            if (sum) { UICtrl.displayDetailsSum(sum, cat[0]); }\r\n\r\n        }\r\n    }\r\n\r\n    var ctrlDisplayCatagoryList = function () {\r\n        var orderedSums, percentages\r\n\r\n        // 1. Get ordered sums and percentages values\r\n        orderedSums = budgetCtrl.getOrderedCatSums();\r\n        percentages = budgetCtrl.getCatPercentages();\r\n\r\n        // 2. Make html array and display it to UI\r\n        UIController.displayCatagoriesList(orderedSums, percentages);\r\n\r\n    }\r\n\r\n    return {\r\n        testing: function () { ctrlUpdateDetails('misc') },\r\n        init: function () {\r\n            console.log('Application has started.');\r\n            UICtrl.displayMonth();\r\n            UICtrl.displayBudget({\r\n                budget: 0,\r\n                totalInc: 0,\r\n                totalExp: 0,\r\n                percentSpent: -1\r\n            })\r\n            setupEventListenters();\r\n        }\r\n    }\r\n\r\n})(budgetController, UIController);\r\n\r\nController.init();\n\n//# sourceURL=webpack:///./src/client/index.js?");

/***/ }),

/***/ "./src/client/login.js":
/*!*****************************!*\
  !*** ./src/client/login.js ***!
  \*****************************/
/*! exports provided: activeUser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"activeUser\", function() { return activeUser; });\nï»¿/*********************\r\n * Views\r\n*********************/\r\nconst clearForm = () => {\r\n    document.querySelector('.login__container').innerHTML = '';\r\n    window.location.href.split('').splice(0, 22).join('');\r\n}\r\n\r\nconst activeUser = () => {\r\n    let active = document.querySelector('.usernameActive');\r\n\r\n    if (active) {\r\n        return active.textContent;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**********************\r\n * Controllers\r\n**********************/\r\ndocument.querySelector('.login__container').addEventListener('click', e => {\r\n    if (e.target.matches('.x')) clearForm();\r\n});\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/client/login.js?");

/***/ }),

/***/ "./src/server/test.js":
/*!****************************!*\
  !*** ./src/server/test.js ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _client_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client/index */ \"./src/client/index.js\");\nï»¿__webpack_require__(/*! babel-register */ \"babel-register\"); \r\n/************************************************ \r\n*  Here is the problem line. It throws a syntax\r\n*  error because 'import' is not recognized. So \r\n*  node does not recognize 'import'.  You cant do \r\n*  require() either because it doesnt recognize\r\n*  the 'export' in the index file. I eventually need \r\n*  the data obj from inside the Budget Controller\r\n*  (in index.js). This is just me testing things.\r\n*/\r\n\r\n/////////////////////////////////////////////////\r\n\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\n\r\nlet dataJson = JSON.stringify(_client_index__WEBPACK_IMPORTED_MODULE_0__[\"data\"]);\r\n\r\nconst writeData = (d) => {\r\n    fs.appendFile('./es6/test-data.json', d, function (err) {\r\n        if (err) throw err;\r\n        console.log('Saved!');\r\n    });\r\n}\r\n\r\nwriteData(dataJson);\r\n\r\n\r\n/***********************************************************\r\n*  MY GOAL:\n*  I already have the login created and stored in \r\n*  the default sql DB that Visual Studio provides. I   \r\n*  can get the unique user email as a js variable on the  \r\n*  client side when they are logged in. I just need to \r\n*  store/get their budget info from the client side and \r\n*  store it... somehow.  I tried just sending it strait  \r\n*  to a json file from index.js but npm's 'fs' wasnt \r\n*  working on the js files that communicates w/ the client,\r\n*  just on the node.js files like this this one. So if\r\n*  if I coulf just get access to variables in index.js\r\n*  I feel like I could do something with that data...\r\n*  \r\n*  Hope this make sense... is there a better way??? I \r\n*  feel like it shouldnt be this difficult. \r\n*\r\n*  (Alot of the dependencies in package.json are me trying\r\n*  to get this to work lol)\r\n*/\n\n//# sourceURL=webpack:///./src/server/test.js?");

/***/ }),

/***/ 0:
/*!*************************************************!*\
  !*** multi babel-polyfill ./src/server/test.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! babel-polyfill */\"babel-polyfill\");\nmodule.exports = __webpack_require__(/*! ./src/server/test.js */\"./src/server/test.js\");\n\n\n//# sourceURL=webpack:///multi_babel-polyfill_./src/server/test.js?");

/***/ }),

/***/ "babel-polyfill":
/*!*********************************!*\
  !*** external "babel-polyfill" ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"babel-polyfill\");\n\n//# sourceURL=webpack:///external_%22babel-polyfill%22?");

/***/ }),

/***/ "babel-register":
/*!*********************************!*\
  !*** external "babel-register" ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"babel-register\");\n\n//# sourceURL=webpack:///external_%22babel-register%22?");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"fs\");\n\n//# sourceURL=webpack:///external_%22fs%22?");

/***/ })

/******/ });